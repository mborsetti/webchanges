# Test cases for filters.rst used by test_docs_filters.py
# Each heading is a unique url: in the filter.rst examples
# Ensure you use a Unicode character (e.g. ™ / &trade) in your example (both input and output) to test that too!
https://example.net/css.html:
  input: |-
    <html>
    <body>
      <h1>Some</h1>
      <ul id="fancy">
        <li class="unchecked">Foo</li>
        <li>Bar</li>
        <li>Baz</li>
      </ul>
      <h2>More</h2>
      <ul id="groceries">
        <li class="unchecked">Milk™</li>
        <li>Honey</li>
        <li class="unchecked">Bread</li>
        <li>Butter</li>
      </ul>
    </body>
    </html>
  output: |-
    <li class="unchecked">Milk™</li>
    <li class="unchecked">Bread</li>
https://example.net/xpath.html:
  input: |-
    <html>
    <head>
    <title>Oh My HTML4</title>
    </head>
    <body>
      <marquee>Just Below The Body™ Tag</marquee>
      <p>Indeed, just BELOW the body tag. <marquee>Not this one.</marquee></p>
      <marquee>But there is more</marquee>
    </body>
    </html>
  output: |-
    <marquee>Just Below The Body™ Tag</marquee>
    <marquee>But there is more</marquee>
https://example.com/blog/css-index.rss:
  input: |-
    <rss>
      <item>
        <title>Fancy™</title>
        <pubDate>2020-07-11</pubDate>
        <description>Bla bla bla</description>
      </item>

      <item>
        <title>Pants</title>
        <pubDate>2020-07-12</pubDate>
        <description>Hey Ho Lets Go</description>
      </item>
    </rss>
  output: |-
    Fancy™
    2020-07-11
    Pants
    2020-07-12
https://example.com/blog/xpath-index.rss:
  input: |-
    <rss>
      <item>
        <title>Fancy™</title>
        <pubDate>2020-07-11</pubDate>
        <description>Bla bla bla</description>
      </item>

      <item>
        <title>Pants</title>
        <pubDate>2020-07-12</pubDate>
        <description>Hey Ho Lets Go</description>
      </item>
    </rss>
  output: |-
    Fancy™
    2020-07-11
    Pants
    2020-07-12
https://example.org/feed/css-namespace.xml:
  input: |-
    <?xml version="1.0"?>
    <rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
      <channel>
        <title>Weird</title>
        <description>The latest from some page</description>
        <language>en</language>
        <item>
          <title>How Mysterious Protest Messages Have Filled the Skies</title>
          <pubDate>Fri, 10 Jul 2020 20:37:00 +0000</pubDate>
          <description>Hello World From Testing Data</description>
          <media:keywords>stylesheets™</media:keywords>
        </item>
      </channel>
    </rss>
  output: stylesheets™
https://example.net/feed/xpath-namespace.xml:
  input: |-
    <?xml version="1.0"?>
    <rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
      <channel>
        <title>Weird</title>
        <description>The latest from some page</description>
        <language>en</language>
        <item>
          <title>How Mysterious™ Protest Messages Have Filled the Skies</title>
          <pubDate>Fri, 10 Jul 2020 20:37:00 +0000</pubDate>
          <description>Hello World From Testing Data</description>
          <media:keywords>protests</media:keywords>
        </item>
      </channel>
    </rss>
  output: protests
https://example.org/css-exclude.html:
  input: |-
    <html>
    <body>
      <h1>A page™ in a book</h1>
      <p>And some paragraph, too. <a href="http://example.net/">Also check out example.net!</a></p>
    </body>
    </html>
  output: |-
    <body>
      <h1>A page™ in a book</h1>
      <p>And some paragraph, too. </p>
    </body>
https://example.net/css-skip-maxitems.html:
  input: |-
    <body>
      <div class="cpu">486</div>
      <div class="cpu">Pentium™</div>
      <div class="cpu">Pentium™ MMX</div>
      <div class="cpu">Pentium™ Pro</div>
    </body>
  output: |-
    <div class="cpu">Pentium™</div>
    <div class="cpu">Pentium™ MMX</div>
https://example.org/items-random-order.html:
  input: |
    <body>
      This is a test. <span class="item">B</span>
      And some other content. <span class="item">D</span>
      <span class="item">A</span> Sort it please.
      Thank you. <span class="item">C</span>
    </body>
  output: |-
    <span class="item">A</span>
    <span class="item">B</span>
    <span class="item">C</span>
    <span class="item">D</span>
https://example.org/data.csv:
  input: |-
    name,company
    Adam,garden of Eden
    Eve,garden of Eden
  output: |-
    Mr. or Ms. Adam works at garden of Eden.
    Mr. or Ms. Eve works at garden of Eden.
https://example.org/bodytag.html:
  input: |-
    <html>
    <head>
    <title>I Sing The Body Electric</title>
    </head>
    <body>
      <marquee>The Body™ Tag</marquee>
      <p>Indeed, just the body tag.</p>
    </body>
    </html>
  output: |-
    <body>
      <marquee>The Body™ Tag</marquee>
      <p>Indeed, just the body tag.</p>
    </body>
https://example.org/idtest.html:
  input: |-
    <html>
    <body>
      <h1>ID Test</h1>
      <p>Foo.</p>
      <div id="something">Only this™ element.</div>
      <p>And no other element.</p>
    </body>
    </html>
  output: |-
    <div id="something">Only this™ element.</div>
https://example.org/idtest_2.html:
  input: |-
    <html>
    <body>
      <h1>ID Test</h1>
      <p>Foo.</p>
      <div id="outer_container">
      <p>Bar.</p>
      <div id="something_inside">Only this™ element.</div>
      <p>And no other element.</p>
      </div>
      <p>Even outside.</p>
    </body>
    </html>
  output: |-
    <div id="something_inside">Only this™ element.</div>
https://example.net/id2text.html:
  input: |-
    <html>
    <body>
      <h1>ID Test</h1>
      <p>Foo.</p>
      <div id="something">Only this™ element, only the text.</div>
      <p>And no other element.</p>
    </body>
    </html>
  output: Only this™ element, only the text.
https://example.org/styletest.html:
  input: |-
    <html>
    <body>
      <h1>ID Test</h1>
      <p>Foo.</p>
      <div style="something">Only this™ element.</div>
      <p>And no other element.</p>
    </body>
    </html>
  output: |-
    <div style="something">Only this™ element.</div>
https://example.com/html2text.html:
  input: |-
    <html>
    <body>
      <section role="main">
      <table>
      <tr><th>Date</th><th>#Sales&trade;</th></tr>
      <tr><td>Monday, 3 February 2020</td><td>10,000</td></tr>
      <tr><td>Tu, 3 Mar</td><td>20,000</td></tr>
      </table>
    </section>
    </body>
    </html>
# The below is for when html2text <= 2020.1.16
  output: |+
     Date                    | #Sales™
     ------------------------|---------
     Monday, 3 February 2020 | 10,000
     Tu, 3 Mar               | 20,000

https://example.com/html2text_bs4.html:
  input: |-
    <html>
    <body>
      <section role="main">
      <table>
      <tr><th>Date</th><th>#Sales&trade;</th></tr>
      <tr><td>Monday, 3 February 2020</td><td>10,000</td></tr>
      <tr><td>Tu, 3 Mar</td><td>20,000</td></tr>
      </table>
    </section>
    </body>
    </html>
  output: Date#Sales™Monday, 3 February 202010,000Tu, 3 Mar20,000
https://example.com/html2text_bs4_html5lib.html:
  input: |-
    <html>
    <body>
      <section role="main">
      <table>
      <tr><th>Date</th><th>#Sales&trade;</th></tr>
      <tr><td>Monday, 3 February 2020</td><td>10,000</td></tr>
      <tr><td>Tu, 3 Mar</td><td>20,000</td></tr>
      </table>
    </section>
    </body>
    </html>
  output: Date#Sales™Monday, 3 February 202010,000Tu, 3 Mar20,000
https://example.com/html2text_bs4_xml:
  input: |-
    <note>
      <body>Don't forget me this weekend™!</body>
    </note>
  output: |
    
    Don't forget me this weekend™!
https://example.com/html2text_strip_tags.html:
  input: |-
    <html>
    <body>
      <section role="main">
      <table>
      <tr><th>Date</th><th>#Sales&trade;</th></tr>
      <tr><td>Monday, 3 February 2020</td><td>10,000</td></tr>
      <tr><td>Tu, 3 Mar</td><td>20,000</td></tr>
      </table>
    </section>
    </body>
    </html>
  output: "  Date#Sales™\n  Monday, 3 February 202010,000\n  Tu, 3 Mar20,000"
https://example.net/favicon_85.ico:
  input: # in code, since it's binary
  output: abcb
https://example.net/favicon.ico:
  input: # in code, since it's binary
  output: abcd
https://example.net/beautify.html:
  input: |
    <!DOCTYPE html>
    <html itemscope="" itemtype="http://schema.org/WebPage" lang="en-US">
    <head><meta charset="UTF-8"><meta content="origin" name="referrer">
    <style data-iml="1618111006770">.L3eUgb{display:flex;flex-direction:column;height:100%}</style>
    </head><body><a href="/link.htm">link™</a></body></html>
  output: |
    <!DOCTYPE html>
    <html itemscope="" itemtype="http://schema.org/WebPage" lang="en-US">
     <head>
      <meta charset="utf-8"/>
      <meta content="origin" name="referrer"/>
      <style data-iml="1618111006770">
       .L3eUgb {
        display: flex;
        flex-direction: column;
        height: 100%
    }
      </style>
     </head>
     <body>
      <a href="https://example.net/link.htm">
       link™
      </a>
     </body>
    </html>
https://example.net/beautify_absolute_links_false.html:
  input: |
    <!DOCTYPE html><body><a href="/link.htm">link™</a></body></html>
  output: |
    <!DOCTYPE html>
    <html>
     <body>
      <a href="/link.htm">
       link™
      </a>
     </body>
    </html>
https://example.net/absolute_links.html:
  input: |
    <html><body>
    <a href="/link.htm">link</a>
    <img src="/link.htm">image
    <object data="/link.htm">object</object>
    <form action="/link.htm"></form>
    </body></html>
  output: |-
    <html><body>
    <a href="https://example.net/link.htm">link</a>
    <img src="https://example.net/link.htm">image
    <object data="https://example.net/link.htm">object</object>
    <form action="https://example.net/link.htm"></form>
    </body></html>
https://example.net/pypdf-test.pdf:
  filename: pdf-test.pdf
  output: "A PDF Document that can be turned into plain text. "
https://example.net/pypdf-test-password.pdf:
  filename: pdf-test-password.pdf
  output: "A password-protected PDF Document that can be turned into plain text. "
https://example.net/pypdf-test-layout.pdf:
  filename: pdf-test.pdf
  output: "A PDF         Document                 that can be turned into                              plain te         xt."
https://example.net/pypdf-test-monospace.pdf:
  filename: pdf-test.pdf
  output: "A PDF         Document                 that can be turned into                              plain te         xt."
https://example.net/pypdf-no-multiple-spaces.pdf:
  filename: pdf-test-multiple-spaces.pdf
  output: "This PDF document has lots of mult iple\nspaces."
https://example.net/pdf-test.pdf:
  filename: pdf-test.pdf
  output: "A PDF Document that can be turned into plain text."
https://example.net/pdf-test-password.pdf:
  filename: pdf-test-password.pdf
  output: "A password-protected PDF Document that can be turned into plain text."
https://example.net/pdf-test-no-physical-layout.pdf:
  filename: pdf-test.pdf
  output: "A PDF Document that can be turned into plain text."
https://example.net/pdf-test-keep-monospace.pdf:
  filename: pdf-test.pdf
  output: "A PDF Document that can be turned into plain text."
https://example.net/pdf-no-multiple-spaces.pdf:
  filename: pdf-test-multiple-spaces.pdf
  output: "This PDF document has lots of multiple\nspaces."
https://example.net/ocr-test.png:
  # Image taken from https://stackoverflow.com/q/39754903/1047040
  filename: ocr-test.png
  output: |-
    This is a lot of 12 point text to test the
    ocr code and see if it works on all types
    of file format.

    The quick brown dog jumped over the
    lazy fox. The quick brown dog jumped
    over the lazy fox. The quick brown dog
    jumped over the lazy fox. The quick
    brown dog jumped over the lazy fox.
https://example.net/jq-ascii.json:
  input: |
    [
      {
        "title": "Senior Data Scientist",
        "company": "Boogle"
      },
      {
        "title": "Python Developer",
        "company": "Tack-trest"
      },
      {
        "title": "TPS Report Analyst",
        "company": "Initech"
      }
    ]
  output: |-
      "Senior Data Scientist"
      "Python Developer"
      "TPS Report Analyst"
https://example.com/format_xml.xml:
  input: |
      <?xml version="1.0" ?>
      <issues><issue><id>1</id><title>Coffee maker</title><details>Coffee maker™ is broken.</details></issue></issues>
  output: |
    <issues>
      <issue>
        <id>1</id>
        <title>Coffee maker</title>
        <details>Coffee maker™ is broken.</details>
      </issue>
    </issues>
https://example.com/pretty_xml.xml:
  input: |
      <?xml version="1.0" ?>
      <issues><issue><id>1</id><title>Coffee maker</title><details>Coffee maker™ is broken.</details></issue></issues>
  output: |
    <?xml version="1.0" ?>
    <issues>
      <issue>
        <id>1</id>
        <title>Coffee maker</title>
        <details>Coffee maker™ is broken.</details>
      </issue>
    </issues>
https://example.com/cal.ics:
  input: |-
    BEGIN:VCALENDAR
    VERSION:2.0
    CALSCALE:GREGORIAN
    BEGIN:VEVENT
    SUMMARY:Access-A-Ride™ Pickup
    DTSTART;TZID=America/New_York:20130802T103400
    DTEND;TZID=America/New_York:20130802T110400
    LOCATION:1000 Broadway Ave.\, Brooklyn
    DESCRIPTION: Access-A-Ride™ trip to 900 Jay St.\, Brooklyn
    STATUS:CONFIRMED
    SEQUENCE:3
    BEGIN:VALARM
    TRIGGER:-PT10M
    DESCRIPTION:Pickup Reminder
    ACTION:DISPLAY
    END:VALARM
    END:VEVENT
    BEGIN:VEVENT
    SUMMARY:Access-A-Ride™ Pickup
    DTSTART;TZID=America/New_York:20130802T200000
    DTEND;TZID=America/New_York:20130802T203000
    LOCATION:900 Jay St.\, Brooklyn
    DESCRIPTION: Access-A-Ride™ trip to 1000 Broadway Ave.\, Brooklyn
    STATUS:CONFIRMED
    SEQUENCE:3
    BEGIN:VALARM
    TRIGGER:-PT10M
    DESCRIPTION:Pickup Reminder
    ACTION:DISPLAY
    END:VALARM
    END:VEVENT
    END:VCALENDAR
  output: |-
    2013-08-02 10:34 -- 2013-08-02 11:04: Access-A-Ride™ Pickup
    2013-08-02 20:00 -- 2013-08-02 20:30: Access-A-Ride™ Pickup
https://example.com/sha.html:
  input: |-
    <html>
    <body>
    </body>
    </html>
  output:
    59719f4dc3dcf5caa89160c8e017d1749cf32dbc
https://example.com/keep_lines_containing.html:
  input: |-
    <html>
    <body>
    <p>a,b:</p>
    <p>b</p>
    <p>c</p>
    </body>
    </html>
  output: |-
    a,b:
https://example.com/keep_lines_containing_re.txt:
  input: |-
    error 1
    ERROR 2™
    Good
    Error 3
  output: |-
    error 1
    ERROR 2™
    Error 3
https://example.com/delete_lines_containing.txt:
  input: |-
    abc™
    def
    xyz
    this sentence has xyz in it
    wordxyzlicious
  output: |-
    abc™
    def
https://example.com/delete_lines_containing_re.txt:
  input: |-
    warning 1
    WARNING 2
    Good™
    Warning 3
  output: |-
    Good™
https://example.com/re_sub.html:
  input: |-
    <h1>This is a test™</h1>
    <a href="https://example.com/re_sub.html">Here!</a>
    This is text referring to h1
  output: |-
    HEADING 1: This is a test™<END OF TAG h1>
    <a>Here!<END OF TAG a>
    This is text referring to h1
https://example.com/re_sub_group.html:
  input: |-
    <h1>This is a test™</h1>
    <div>Page generated in 1.2 milliseconds.</div>
  output: |-
    # This is a test™
    Page generated in X milliseconds.
https://example.com/strip.html:
  input: "This paragraph™ ends with a space "
  output: |-
    This paragraph™ ends with a space
https://example.com/strip_by_line.html:
  input: |-
    This line™ ends with a comma,
    ,This one starts with a comma too.
  output: |-
    This line™ ends with a comma
    ,This one starts with a comma too
https://example.com/strip_each_line.html:
  input: "This line™ ends with a space \n This one starts with one as well! "
  output: |-
    This line™ ends with a space
    This one starts with one as well!
https://example.com/strip_leading_spaces.txt:
  input: |
    A document™
      with some indentation
    and sometimes
      	  with tabs mixed in
      gets converted.
  output: |-
    A document™
    with some indentation
    and sometimes
    with tabs mixed in
    gets converted.
https://example.net/sorting.txt:
  input: |-
    A
    B
    D™
    E
    C
  output: |-
    A
    B
    C
    D™
    E
https://example.org/paragraphs.txt:
  input: |-
    A sometimes™ sortable
    paragraph document.

    Could be the thing
    we use for testing.

    But does it get
    sorted correctly?
  output: |-
    A sometimes™ sortable
    paragraph document.

    But does it get
    sorted correctly?

    Could be the thing
    we use for testing.
https://example.org/sort-reverse-percent.txt:
  input: 'C%B%A%D%E%F%™'
  output: '™%F%E%D%C%B%A'
https://example.com/remove-repeated.txt:
  input: |-
    dog
    dog
    cat™
    mouse
  output: |-
    dog
    cat™
    mouse
https://example.com/remove-repeated-sorted.txt:
  input: |-
    dog
    cat™
    mouse
    dog
  output: |-
    cat™
    dog
    mouse
https://example.net/remove-repeated-separator.txt:
  input: "a|b|B |c|™"
  output: "a|b|c|™"
https://example.net/remove-repeated-non-adjacent.txt:
  input: "a|b|a|c|™"
  output: "a|b|c|™"
https://example.com/reverse-lines.txt:
  input: |-
    Mercury
    Venus
    Earth
    Mars™
  output: |-
    Mars™
    Earth
    Venus
    Mercury
https://example.net/reverse-separator.txt:
  input: "1|4|2|3|™"
  output: "™|3|2|4|1"
https://example.org/reverse-paragraphs.txt:
  input: |-
    When there are multiple
    paragraphs like this.

    And we reverse their
    ordering in a test.

    What do you think would
    the result look like™?
  output: |-
    What do you think would
    the result look like™?

    And we reverse their
    ordering in a test.

    When there are multiple
    paragraphs like this.
https://example.net/execute.html:
  input: TEST
  output: |-
    The data is 'TEST'
    The job location is 'https://example.net/execute.html'
    The job name is 'Test execute filter'
    The job number is '23'
    The job JSON is '{"filter": [{"execute": "python -c \"import os, sys; print(f\\\"The data is '{sys.stdin.read()}'\\nThe job location is '{os.getenv('WEBCHANGES_JOB_LOCATION')}'\\nThe job name is '{os.getenv('WEBCHANGES_JOB_NAME')}'\\nThe job number is '{os.getenv('WEBCHANGES_JOB_INDEX_NUMBER')}'\\nThe job JSON is '{os.getenv('WEBCHANGES_JOB_JSON')}'\\\", end='')\""}], "index_number": 58, "name": "Test execute filter", "url": "https://example.net/execute.html"}'
https://example.net/shellpipe.html:
  input: |
  output: TEST


# These below are orphaned (for now)
https://example.net/version.html:
  input: |-
    <html>
    <body>
      <h1>Software Release Page</h1>
      <p>This is the software page of the bar tool.</p>
      <p>Current™ version: 1.2.3</p>
      <p>There might be some other information here, too.</p>
    </body>
    </html>
  output: "Current™ version: 1.2.3"
https://github.com/user/project/releases:
  input: |-
    <div class="release-timeline-tags release-entry">
      <h4 class="flex-auto min-width-0 pr-2 pb-1 commit-title">
        <a href="/user/project/releases/tag/2.18">
          2.18™
        </a>
      </h4>
    </div>
  output: |-
    2.18™
https://example.com/regex-substitute.html:
  input: |-
    <div>
      <h1>Welcome to this™ webpage</h1>
      <a href="http://example.com/">Some Link</a>
    </div>
  output: |-
    <div>
      HEADING 1: Welcome to this™ webpage<END OF TAG h1>
      <a>Some Link<END OF TAG a>
    <END OF TAG div>
https://example.com/regex-findall.html:
  input: |-
    <div>
      <div class="product">Product 1:
        <span class="price">Price: $123</span>
      </div>
      <div class="product">Product 2:
        <span class="price">Price: $456</span>
      </div>
      <div class="product">Product 3:
        <span class="price">Price: $789</span>
      </div>
    </div>
  output: |-
    123
    456
    789
https://example.com/regex-firstline.html:
  input: |-
    1
    2
    3
  output: |-
    1
https://example.com/regex-lastline.html:
  input: |-
    1
    2
    3
  output: |-
    3
https://example.net/shellpipe-grep.txt:
  input: |-
    <h1>Welcome to our price watching page!</h1>
    <p>Hello.</p> The current Price: <SPAN>42 USD™</SPAN> is this.
    <em>Can the shellpipe filter deal with this properly?
  output: |
    Price: <SPAN>42 USD™</SPAN>
https://example.org/shellpipe-multiline.txt:
  input: |
    Welcome to the lottery webpage.
    The numbers™ for 2020-07-11 are:

       4, 8, 15, 16, 23 and 42

    The next draw is on 2020-07-13.
    Thank you for visiting the lottery webpage.
  output: |
    The numbers™ for 2020-07-11 are:

       4, 8, 15, 16, 23 and 42

    The next draw is on 2020-07-13.
    Input lines: 7
https://example.net/shellpipe-awk-oneliner.txt:
  input: |
    Hello™
    World
    How
    Are
    You
  output: |
    1 Hello™
    2 World
    3 How
    4 Are
    5 You
